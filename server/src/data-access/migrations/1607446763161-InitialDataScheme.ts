import { MigrationInterface, QueryRunner } from 'typeorm';

/**
 * [AUTOGENERATED] by typeorm
 * Sets up the inital data scheme or reverts it
 */
export class InitialDataScheme1607446763161 implements MigrationInterface {
	name = 'InitialDataScheme1607446763161';

	public async up(queryRunner: QueryRunner): Promise<void> {
		await queryRunner.query(
			`CREATE TABLE "login_attempt" ("id" varchar PRIMARY KEY NOT NULL, "timestamp" integer NOT NULL, "successful" integer NOT NULL, "userId" varchar)`,
		);
		await queryRunner.query(
			`CREATE TABLE "role" ("id" varchar PRIMARY KEY NOT NULL, "name" text NOT NULL)`,
		);
		await queryRunner.query(
			`CREATE TABLE "sms_token" ("token" text PRIMARY KEY NOT NULL, "issuedAt" integer NOT NULL, "redeemed" integer NOT NULL, "userId" varchar)`,
		);
		await queryRunner.query(
			`CREATE TABLE "user" ("id" varchar PRIMARY KEY NOT NULL, "email" text NOT NULL, "phone" text NOT NULL, "password" text NOT NULL)`,
		);
		await queryRunner.query(
			`CREATE TABLE "post" ("id" varchar PRIMARY KEY NOT NULL, "content" text NOT NULL, "status" integer NOT NULL, "authorId" varchar)`,
		);
		await queryRunner.query(
			`CREATE TABLE "comment" ("id" varchar PRIMARY KEY NOT NULL, "timestamp" integer NOT NULL, "message" text NOT NULL, "authorId" varchar, "postId" varchar)`,
		);
		await queryRunner.query(
			`CREATE TABLE "user_roles_role" ("userId" varchar NOT NULL, "roleId" varchar NOT NULL, PRIMARY KEY ("userId", "roleId"))`,
		);
		await queryRunner.query(
			`CREATE INDEX "IDX_5f9286e6c25594c6b88c108db7" ON "user_roles_role" ("userId") `,
		);
		await queryRunner.query(
			`CREATE INDEX "IDX_4be2f7adf862634f5f803d246b" ON "user_roles_role" ("roleId") `,
		);
		await queryRunner.query(
			`CREATE TABLE "temporary_login_attempt" ("id" varchar PRIMARY KEY NOT NULL, "timestamp" integer NOT NULL, "successful" integer NOT NULL, "userId" varchar, CONSTRAINT "FK_dcca053abaa3e4b753b980a97fc" FOREIGN KEY ("userId") REFERENCES "user" ("id") ON DELETE CASCADE ON UPDATE NO ACTION)`,
		);
		await queryRunner.query(
			`INSERT INTO "temporary_login_attempt"("id", "timestamp", "successful", "userId") SELECT "id", "timestamp", "successful", "userId" FROM "login_attempt"`,
		);
		await queryRunner.query(`DROP TABLE "login_attempt"`);
		await queryRunner.query(
			`ALTER TABLE "temporary_login_attempt" RENAME TO "login_attempt"`,
		);
		await queryRunner.query(
			`CREATE TABLE "temporary_sms_token" ("token" text PRIMARY KEY NOT NULL, "issuedAt" integer NOT NULL, "redeemed" integer NOT NULL, "userId" varchar, CONSTRAINT "FK_3837076a666174406a765ce539e" FOREIGN KEY ("userId") REFERENCES "user" ("id") ON DELETE CASCADE ON UPDATE NO ACTION)`,
		);
		await queryRunner.query(
			`INSERT INTO "temporary_sms_token"("token", "issuedAt", "redeemed", "userId") SELECT "token", "issuedAt", "redeemed", "userId" FROM "sms_token"`,
		);
		await queryRunner.query(`DROP TABLE "sms_token"`);
		await queryRunner.query(
			`ALTER TABLE "temporary_sms_token" RENAME TO "sms_token"`,
		);
		await queryRunner.query(
			`CREATE TABLE "temporary_post" ("id" varchar PRIMARY KEY NOT NULL, "content" text NOT NULL, "status" integer NOT NULL, "authorId" varchar, CONSTRAINT "FK_c6fb082a3114f35d0cc27c518e0" FOREIGN KEY ("authorId") REFERENCES "user" ("id") ON DELETE RESTRICT ON UPDATE NO ACTION)`,
		);
		await queryRunner.query(
			`INSERT INTO "temporary_post"("id", "content", "status", "authorId") SELECT "id", "content", "status", "authorId" FROM "post"`,
		);
		await queryRunner.query(`DROP TABLE "post"`);
		await queryRunner.query(
			`ALTER TABLE "temporary_post" RENAME TO "post"`,
		);
		await queryRunner.query(
			`CREATE TABLE "temporary_comment" ("id" varchar PRIMARY KEY NOT NULL, "timestamp" integer NOT NULL, "message" text NOT NULL, "authorId" varchar, "postId" varchar, CONSTRAINT "FK_276779da446413a0d79598d4fbd" FOREIGN KEY ("authorId") REFERENCES "user" ("id") ON DELETE NO ACTION ON UPDATE NO ACTION, CONSTRAINT "FK_94a85bb16d24033a2afdd5df060" FOREIGN KEY ("postId") REFERENCES "post" ("id") ON DELETE CASCADE ON UPDATE NO ACTION)`,
		);
		await queryRunner.query(
			`INSERT INTO "temporary_comment"("id", "timestamp", "message", "authorId", "postId") SELECT "id", "timestamp", "message", "authorId", "postId" FROM "comment"`,
		);
		await queryRunner.query(`DROP TABLE "comment"`);
		await queryRunner.query(
			`ALTER TABLE "temporary_comment" RENAME TO "comment"`,
		);
		await queryRunner.query(`DROP INDEX "IDX_5f9286e6c25594c6b88c108db7"`);
		await queryRunner.query(`DROP INDEX "IDX_4be2f7adf862634f5f803d246b"`);
		await queryRunner.query(
			`CREATE TABLE "temporary_user_roles_role" ("userId" varchar NOT NULL, "roleId" varchar NOT NULL, CONSTRAINT "FK_5f9286e6c25594c6b88c108db77" FOREIGN KEY ("userId") REFERENCES "user" ("id") ON DELETE RESTRICT ON UPDATE NO ACTION, CONSTRAINT "FK_4be2f7adf862634f5f803d246b8" FOREIGN KEY ("roleId") REFERENCES "role" ("id") ON DELETE RESTRICT ON UPDATE NO ACTION, PRIMARY KEY ("userId", "roleId"))`,
		);
		await queryRunner.query(
			`INSERT INTO "temporary_user_roles_role"("userId", "roleId") SELECT "userId", "roleId" FROM "user_roles_role"`,
		);
		await queryRunner.query(`DROP TABLE "user_roles_role"`);
		await queryRunner.query(
			`ALTER TABLE "temporary_user_roles_role" RENAME TO "user_roles_role"`,
		);
		await queryRunner.query(
			`CREATE INDEX "IDX_5f9286e6c25594c6b88c108db7" ON "user_roles_role" ("userId") `,
		);
		await queryRunner.query(
			`CREATE INDEX "IDX_4be2f7adf862634f5f803d246b" ON "user_roles_role" ("roleId") `,
		);
	}

	public async down(queryRunner: QueryRunner): Promise<void> {
		await queryRunner.query(`DROP INDEX "IDX_4be2f7adf862634f5f803d246b"`);
		await queryRunner.query(`DROP INDEX "IDX_5f9286e6c25594c6b88c108db7"`);
		await queryRunner.query(
			`ALTER TABLE "user_roles_role" RENAME TO "temporary_user_roles_role"`,
		);
		await queryRunner.query(
			`CREATE TABLE "user_roles_role" ("userId" varchar NOT NULL, "roleId" varchar NOT NULL, PRIMARY KEY ("userId", "roleId"))`,
		);
		await queryRunner.query(
			`INSERT INTO "user_roles_role"("userId", "roleId") SELECT "userId", "roleId" FROM "temporary_user_roles_role"`,
		);
		await queryRunner.query(`DROP TABLE "temporary_user_roles_role"`);
		await queryRunner.query(
			`CREATE INDEX "IDX_4be2f7adf862634f5f803d246b" ON "user_roles_role" ("roleId") `,
		);
		await queryRunner.query(
			`CREATE INDEX "IDX_5f9286e6c25594c6b88c108db7" ON "user_roles_role" ("userId") `,
		);
		await queryRunner.query(
			`ALTER TABLE "comment" RENAME TO "temporary_comment"`,
		);
		await queryRunner.query(
			`CREATE TABLE "comment" ("id" varchar PRIMARY KEY NOT NULL, "timestamp" integer NOT NULL, "message" text NOT NULL, "authorId" varchar, "postId" varchar)`,
		);
		await queryRunner.query(
			`INSERT INTO "comment"("id", "timestamp", "message", "authorId", "postId") SELECT "id", "timestamp", "message", "authorId", "postId" FROM "temporary_comment"`,
		);
		await queryRunner.query(`DROP TABLE "temporary_comment"`);
		await queryRunner.query(
			`ALTER TABLE "post" RENAME TO "temporary_post"`,
		);
		await queryRunner.query(
			`CREATE TABLE "post" ("id" varchar PRIMARY KEY NOT NULL, "content" text NOT NULL, "status" integer NOT NULL, "authorId" varchar)`,
		);
		await queryRunner.query(
			`INSERT INTO "post"("id", "content", "status", "authorId") SELECT "id", "content", "status", "authorId" FROM "temporary_post"`,
		);
		await queryRunner.query(`DROP TABLE "temporary_post"`);
		await queryRunner.query(
			`ALTER TABLE "sms_token" RENAME TO "temporary_sms_token"`,
		);
		await queryRunner.query(
			`CREATE TABLE "sms_token" ("token" text PRIMARY KEY NOT NULL, "issuedAt" integer NOT NULL, "redeemed" integer NOT NULL, "userId" varchar)`,
		);
		await queryRunner.query(
			`INSERT INTO "sms_token"("token", "issuedAt", "redeemed", "userId") SELECT "token", "issuedAt", "redeemed", "userId" FROM "temporary_sms_token"`,
		);
		await queryRunner.query(`DROP TABLE "temporary_sms_token"`);
		await queryRunner.query(
			`ALTER TABLE "login_attempt" RENAME TO "temporary_login_attempt"`,
		);
		await queryRunner.query(
			`CREATE TABLE "login_attempt" ("id" varchar PRIMARY KEY NOT NULL, "timestamp" integer NOT NULL, "successful" integer NOT NULL, "userId" varchar)`,
		);
		await queryRunner.query(
			`INSERT INTO "login_attempt"("id", "timestamp", "successful", "userId") SELECT "id", "timestamp", "successful", "userId" FROM "temporary_login_attempt"`,
		);
		await queryRunner.query(`DROP TABLE "temporary_login_attempt"`);
		await queryRunner.query(`DROP INDEX "IDX_4be2f7adf862634f5f803d246b"`);
		await queryRunner.query(`DROP INDEX "IDX_5f9286e6c25594c6b88c108db7"`);
		await queryRunner.query(`DROP TABLE "user_roles_role"`);
		await queryRunner.query(`DROP TABLE "comment"`);
		await queryRunner.query(`DROP TABLE "post"`);
		await queryRunner.query(`DROP TABLE "user"`);
		await queryRunner.query(`DROP TABLE "sms_token"`);
		await queryRunner.query(`DROP TABLE "role"`);
		await queryRunner.query(`DROP TABLE "login_attempt"`);
	}
}
